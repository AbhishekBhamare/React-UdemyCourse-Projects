{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\movie_app_with_backend\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMovieHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong');\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          relaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      console.log(error.message);\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMovieHandler();\n  }, [fetchMovieHandler]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 33\n    }\n  }, error), !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 45\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), !isLoading && movies.length === 0 && !error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 57\n    }\n  }, \"No Movies found\")));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/React/movie_app_with_backend/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMovieHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","relaseDate","release_date","console","log","message","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AAGA,QAAMW,iBAAiB,GAAIT,WAAW,CAAC,YAAY;AACjDM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAG;AACD,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAAD,CAA5B;;AACA,UAAG,CAACD,QAAQ,CAACE,EAAb,EAAgB;AACd,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,YAAMC,IAAI,GAAI,MAAMJ,QAAQ,CAACK,IAAT,EAApB;AAGA,YAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBC,SAAS,IAAI;AACtD,eAAO;AACLC,UAAAA,EAAE,EAAED,SAAS,CAACE,UADT;AAELC,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAFZ;AAGLC,UAAAA,WAAW,EAACJ,SAAS,CAACK,aAHjB;AAILC,UAAAA,UAAU,EAAEN,SAAS,CAACO;AAJjB,SAAP;AAMD,OAPyB,CAA1B;AAQAtB,MAAAA,SAAS,CAACY,iBAAD,CAAT;AACD,KAjBD,CAiBE,OAAMT,KAAN,EAAY;AACZoB,MAAAA,OAAO,CAACC,GAAR,CAAYrB,KAAK,CAACsB,OAAlB;AACArB,MAAAA,QAAQ,CAACD,KAAK,CAACsB,OAAP,CAAR;AACD;;AACDvB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAzBqC,EAyBnC,EAzBmC,CAAtC;AA2BAP,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;AAGA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEA,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEG,CAACJ,SAAD,IAAcE,KAAd,iBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAJ,CAF1B,EAGG,CAACF,SAAD,IAAcF,MAAM,CAAC2B,MAAP,GAAgB,CAA9B,iBAAmC,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAE3B,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHtC,EAIGE,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJhB,EAKG,CAACA,SAAD,IAAcF,MAAM,CAAC2B,MAAP,KAAkB,CAAhC,IAAqC,CAACvB,KAAtC,iBAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBALlD,CAJF,CADF;AAeD;;AAED,eAAeL,GAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n\n  const fetchMovieHandler =  useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try{\n      const response = await fetch('https://swapi.dev/api/films/')\n      if(!response.ok){\n        throw new Error('Something went wrong');\n      }\n      const data =  await response.json();\n\n      \n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText:movieData.opening_crawl, \n          relaseDate: movieData.release_date,\n        };\n      })\n      setMovies(transformedMovies);\n    } catch(error){\n      console.log(error.message)\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMovieHandler();\n  }, [fetchMovieHandler]);\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        \n        {!isLoading && error && <p>{error}</p>}\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} /> }\n        {isLoading && <p>Loading...</p>}\n        {!isLoading && movies.length === 0 && !error && <p>No Movies found</p>}\n      \n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}